version: '3.3'

services:
  python-framework:
    image: python:latest
    environment:
      - FRAMEWORK=${FRAMEWORK}
    volumes:
      - .:/usr/src/app
    ports:
      - "8000:8000"
    command: >
      sh -c "
      if [ '${FRAMEWORK}' = 'Django' ]; then
        django-admin startproject mysite;
        cd mysite;
        python manage.py runserver 0.0.0.0:8000;
      elif [ '${FRAMEWORK}' = 'Flask' ]; then
        mkdir -p /usr/src/app;
        cd /usr/src/app;
        echo 'from flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello_world():\n return \"Hello, World!\"\nif __name__ == \"__main__\":\n app.run(host=\"0.0.0.0\")' > app.py;
        python app.py;
      elif [ '${FRAMEWORK}' = 'FastAPI' ]; then
        pip install fastapi uvicorn;
        mkdir -p /usr/src/app;
        cd /usr/src/app;
        echo 'from fastapi import FastAPI\napp = FastAPI()\n@app.get("/")\ndef read_root():\n return {"Hello": "World"}' > main.py;
        uvicorn main:app --host 0.0.0.0 --port 8000;
      elif [ '${FRAMEWORK}' = 'Pyramid' ]; then
        pip install pyramid;
        mkdir -p /usr/src/app;
        cd /usr/src/app;
        echo 'from wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\ndef hello_world(request):\n return Response(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n with Configurator() as config:\n config.add_route(\"home\", \"/\")\n config.add_view(hello_world, route_name=\"home\")\n app = config.make_wsgi_app()\n server = make_server(\"0.0.0.0\", 8000, app)\n server.serve_forever()' > app.py;
        python app.py;
      elif [ '${FRAMEWORK}' = 'Tornado' ]; then
        pip install tornado;
        mkdir -p /usr/src/app;
        cd /usr/src/app;
        echo 'import tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n def get(self):\n self.write(\"Hello, World!\")\n\ndef make_app():\n return tornado.web.Application([\n (r\"/\", MainHandler),\n])\n\nif __name__ == \"__main__\":\n app = make_app()\n app.listen(8000)\n tornado.ioloop.IOLoop.current().start()' > app.py;
        python app.py;
      else
        echo 'Invalid framework selected';
      fi
      "
